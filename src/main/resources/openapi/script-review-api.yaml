openapi: 3.0.3
info:
  title: Script Review API
  version: 1.0.0
  description: API for film script submission and tracking
servers:
  - url: https://virtserver.swaggerhub.com/nksolucoes/script-review-api/1.0.0
    description: SwaggerHub Mock Server
  - url: https://mock.scriptreview.api
    description: Mock server for front-end testing
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: Scripts
    description: Endpoints for script submission and tracking
  - name: Authentication
    description: Endpoints for user login and token management
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequestDTO'
            example:
              email: analyst@cooperfilme.com
              password: 123456
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Unauthorized

  /scripts:
    post:
      tags:
        - Scripts
      summary: Submit a new script
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptRequest'
            example:
              title: A Great Journey
              content: Once upon a time...
              client:
                name: Jane Doe
                email: jane@example.com
                phone: '123456789'
      responses:
        '201':
          description: Script submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptResponse'
              example:
                id: 1
                status: AWAITING_ANALYSIS

    get:
      security:
        - bearerAuth: []
      tags:
        - Scripts
      summary: List all scripts
      responses:
        '200':
          description: List of scripts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScriptResponse'

  /scripts/{id}/status:
    get:
      tags:
        - Scripts
      summary: Get script status by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Script status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptStatus'
              example: AWAITING_ANALYSIS
        '404':
          description: Script not found

    put:
      security:
        - bearerAuth: []
      tags:
        - Scripts
      summary: Update script status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/ScriptStatus'
              required:
                - status
            example:
              status: IN_ANALYSIS
      responses:
        '204':
          description: Status updated
        '400':
          description: Invalid transition
        '404':
          description: Not found

  /scripts/{id}/vote:
    post:
      security:
        - bearerAuth: []
      tags:
        - Scripts
      summary: Vote on a script
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteRequest'
            examples:
              approve:
                summary: Approve
                value: { approved: true }
              reject:
                summary: Reject
                value: { approved: false }
      responses:
        '204':
          description: Vote recorded
        '400':
          description: Business rule violation
        '404':
          description: Script not found

  /scripts/client/{email}:
    get:
      tags:
        - Scripts
      summary: Get scripts by client email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of client scripts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScriptResponse'
        '404':
          description: No scripts found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ScriptRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        client:
          $ref: '#/components/schemas/Client'
      required:
        - title
        - content
        - client

    ScriptResponse:
      type: object
      properties:
        id:
          type: integer
        status:
          $ref: '#/components/schemas/ScriptStatus'

    ScriptStatus:
      type: string
      enum:
        - AWAITING_ANALYSIS
        - IN_ANALYSIS
        - AWAITING_REVIEW
        - IN_REVIEW
        - AWAITING_APPROVAL
        - IN_APPROVAL
        - APPROVED
        - REJECTED

    Client:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
      required:
        - name
        - email
        - phone

    AuthRequestDTO:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    AuthResponseDTO:
      type: object
      properties:
        token:
          type: string

    VoteRequest:
      type: object
      properties:
        approved:
          type: boolean
      required:
        - approved
